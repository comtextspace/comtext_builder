import { existsSync, mkdirSync, copyFileSync, readdirSync, unlinkSync } from 'fs';
import { resolve, join } from 'path';

let CACHE_PATH;

export function initCache(cachePath) {
  CACHE_PATH = cachePath;

  if (!existsSync(CACHE_PATH)) {
    mkdirSync(CACHE_PATH, { recursive: true });
  }
}


/**
 * –ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –∏–∑ –∫–µ—à–∞.
 * @param {string} cacheFileName - –ò–º—è —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ –∫–µ—à–∞.
 * @param {string} restoreToPath - –ü—É—Ç—å, –∫—É–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª.
 * @returns {boolean} true, –µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∞—á–µ false.
 */
export function tryRestoreFileFromCache(cacheFileName, restoreToPath) {
  const cacheFilePath = resolve(CACHE_PATH, cacheFileName);
  const targetPath = resolve(restoreToPath);

  if (existsSync(cacheFilePath)) {
    copyFileSync(cacheFilePath, targetPath);
    return true;
  }

  return false;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –≤ –∫–µ—à, —É–¥–∞–ª–∏–≤ –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —Å —Ç–∞–∫–∏–º –∂–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –¥–æ –∏ —Å `|`.
 * –ù–∞–ø—Ä–∏–º–µ—Ä: –¥–ª—è `fb2--book1.md-|-v1--hash.fb2` ‚Üí –ø—Ä–µ—Ñ–∏–∫—Å: `fb2--book1.md-|`
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —ç—Ç–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞.
 * 
 * @param {string} filePath - –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É.
 * @param {string} cacheFileName - –ò–º—è —Ñ–∞–π–ª–∞ –≤ –∫–µ—à–µ: –Ω–∞–ø—Ä–∏–º–µ—Ä, fb2--book1.md-|-v1--abc.fb2
 * @returns {boolean} true, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ.
 */
export function saveFileToCache(filePath, cacheFileName) {
  const sourcePath = resolve(filePath);
  const cacheDir = resolve(CACHE_PATH);
  const cacheFilePath = join(cacheDir, cacheFileName);

  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Å–∏–º–≤–æ–ª–∞ '|'
  const pipeIndex = cacheFileName.indexOf('|');
  if (pipeIndex === -1) {
    console.error(`‚ùå –ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–º–≤–æ–ª "|": ${cacheFileName}`);
    return false;
  }

  // –ë–µ—Ä—ë–º –≤—Å—ë, —á—Ç–æ –¥–æ `|` –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ ‚Äî —ç—Ç–æ –Ω–∞—à –ø—Ä–µ—Ñ–∏–∫—Å
  const prefix = cacheFileName.slice(0, pipeIndex + 1); // +1 —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å `|`
  const files = readdirSync(cacheDir);

  try {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —ç—Ç–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    for (const file of files) {
      if (file.startsWith(prefix)) {
        const fullPath = join(cacheDir, file);
        unlinkSync(fullPath);
        console.log(`üóëÔ∏è –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –∫–µ—à-—Ñ–∞–π–ª: ${file}`);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    copyFileSync(sourcePath, cacheFilePath);
    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–æ–≤—ã–π –∫–µ—à-—Ñ–∞–π–ª: ${cacheFileName}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∫–µ—à: ${error.message}`);
    return false;
  }
}