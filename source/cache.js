import { existsSync, mkdirSync, copyFileSync, readdirSync, unlinkSync } from "fs";
import { resolve, join } from "path";

let CACHE_PATH;
const actualFiles = [];

export function initCache(cachePath) {
  CACHE_PATH = cachePath;

  if (!existsSync(CACHE_PATH)) {
    mkdirSync(CACHE_PATH, { recursive: true });
  }
}


/**
 * –ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –∏–∑ –∫–µ—à–∞.
 * @param {string} cacheFileName - –ò–º—è —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ –∫–µ—à–∞.
 * @param {string} restoreToPath - –ü—É—Ç—å, –∫—É–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª.
 * @returns {boolean} true, –µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∞—á–µ false.
 */
export function tryRestoreFileFromCache(cacheFileName, restoreToPath) {
  const cacheFilePath = resolve(CACHE_PATH, cacheFileName);
  const targetPath = resolve(restoreToPath);

  if (existsSync(cacheFilePath)) {
    copyFileSync(cacheFilePath, targetPath);
    actualFiles.push(cacheFileName);
    return true;
  }

  return false;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –≤ –∫–µ—à.
 * 
 * @param {string} filePath - –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É.
 * @param {string} cacheFileName - –ò–º—è —Ñ–∞–π–ª–∞ –≤ –∫–µ—à–µ: –Ω–∞–ø—Ä–∏–º–µ—Ä, fb2--book1.md-|-v1--abc.fb2
 * @returns {boolean} true, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ.
 */
export function saveFileToCache(filePath, cacheFileName) {
  const sourcePath = resolve(filePath);
  const cacheDir = resolve(CACHE_PATH);
  const cacheFilePath = join(cacheDir, cacheFileName);

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    copyFileSync(sourcePath, cacheFilePath);
    actualFiles.push(cacheFileName);
    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–æ–≤—ã–π –∫–µ—à-—Ñ–∞–π–ª: ${cacheFileName}`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∫–µ—à: ${error.message}`);
    return false;
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ CACHE_PATH, –∫—Ä–æ–º–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤ actualFiles.
 * @param {string} cachePath - –ü—É—Ç—å –∫ –∫–µ—à-–∫–∞—Ç–∞–ª–æ–≥—É.
 * @param {string[]} actualFiles - –ú–∞—Å—Å–∏–≤ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: ['book1.fb2', 'book2.epub']).
 */
export function cleanupOldCache() {
  const fullPath = resolve(CACHE_PATH);

  try {
    const files = readdirSync(fullPath);

    for (const file of files) {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö ‚Äî —É–¥–∞–ª—è–µ–º
      if (!actualFiles.includes(file)) {
        const filePath = join(fullPath, file);
        unlinkSync(filePath);
        console.log(`üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: ${file}`);
      }
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞: ${error.message}`);
  }
}